using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;


[RealtimeModel]
public partial class FinColSyncModel
{
    [RealtimeProperty(1, true, true)]
    private string _whowinner;
    [RealtimeProperty(2, true, true)]
    private float _timeFirst;
    [RealtimeProperty(3, true, true)]
    private float _timeSecond;
    [RealtimeProperty(4, true, true)]
    private float _colFirst;
    [RealtimeProperty(5, true, true)]
    private float _colSecond;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class FinColSyncModel : RealtimeModel {
    public string whowinner {
        get {
            return _whowinnerProperty.value;
        }
        set {
            if (_whowinnerProperty.value == value) return;
            _whowinnerProperty.value = value;
            InvalidateReliableLength();
            FireWhowinnerDidChange(value);
        }
    }
    
    public float timeFirst {
        get {
            return _timeFirstProperty.value;
        }
        set {
            if (_timeFirstProperty.value == value) return;
            _timeFirstProperty.value = value;
            InvalidateReliableLength();
            FireTimeFirstDidChange(value);
        }
    }
    
    public float timeSecond {
        get {
            return _timeSecondProperty.value;
        }
        set {
            if (_timeSecondProperty.value == value) return;
            _timeSecondProperty.value = value;
            InvalidateReliableLength();
            FireTimeSecondDidChange(value);
        }
    }
    
    public float colFirst {
        get {
            return _colFirstProperty.value;
        }
        set {
            if (_colFirstProperty.value == value) return;
            _colFirstProperty.value = value;
            InvalidateReliableLength();
            FireColFirstDidChange(value);
        }
    }
    
    public float colSecond {
        get {
            return _colSecondProperty.value;
        }
        set {
            if (_colSecondProperty.value == value) return;
            _colSecondProperty.value = value;
            InvalidateReliableLength();
            FireColSecondDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(FinColSyncModel model, T value);
    public event PropertyChangedHandler<string> whowinnerDidChange;
    public event PropertyChangedHandler<float> timeFirstDidChange;
    public event PropertyChangedHandler<float> timeSecondDidChange;
    public event PropertyChangedHandler<float> colFirstDidChange;
    public event PropertyChangedHandler<float> colSecondDidChange;
    
    public enum PropertyID : uint {
        Whowinner = 1,
        TimeFirst = 2,
        TimeSecond = 3,
        ColFirst = 4,
        ColSecond = 5,
    }
    
    #region Properties
    
    private ReliableProperty<string> _whowinnerProperty;
    
    private ReliableProperty<float> _timeFirstProperty;
    
    private ReliableProperty<float> _timeSecondProperty;
    
    private ReliableProperty<float> _colFirstProperty;
    
    private ReliableProperty<float> _colSecondProperty;
    
    #endregion
    
    public FinColSyncModel() : base(null) {
        _whowinnerProperty = new ReliableProperty<string>(1, _whowinner);
        _timeFirstProperty = new ReliableProperty<float>(2, _timeFirst);
        _timeSecondProperty = new ReliableProperty<float>(3, _timeSecond);
        _colFirstProperty = new ReliableProperty<float>(4, _colFirst);
        _colSecondProperty = new ReliableProperty<float>(5, _colSecond);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _whowinnerProperty.UnsubscribeCallback();
        _timeFirstProperty.UnsubscribeCallback();
        _timeSecondProperty.UnsubscribeCallback();
        _colFirstProperty.UnsubscribeCallback();
        _colSecondProperty.UnsubscribeCallback();
    }
    
    private void FireWhowinnerDidChange(string value) {
        try {
            whowinnerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTimeFirstDidChange(float value) {
        try {
            timeFirstDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTimeSecondDidChange(float value) {
        try {
            timeSecondDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColFirstDidChange(float value) {
        try {
            colFirstDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireColSecondDidChange(float value) {
        try {
            colSecondDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _whowinnerProperty.WriteLength(context);
        length += _timeFirstProperty.WriteLength(context);
        length += _timeSecondProperty.WriteLength(context);
        length += _colFirstProperty.WriteLength(context);
        length += _colSecondProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _whowinnerProperty.Write(stream, context);
        writes |= _timeFirstProperty.Write(stream, context);
        writes |= _timeSecondProperty.Write(stream, context);
        writes |= _colFirstProperty.Write(stream, context);
        writes |= _colSecondProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Whowinner: {
                    changed = _whowinnerProperty.Read(stream, context);
                    if (changed) FireWhowinnerDidChange(whowinner);
                    break;
                }
                case (uint) PropertyID.TimeFirst: {
                    changed = _timeFirstProperty.Read(stream, context);
                    if (changed) FireTimeFirstDidChange(timeFirst);
                    break;
                }
                case (uint) PropertyID.TimeSecond: {
                    changed = _timeSecondProperty.Read(stream, context);
                    if (changed) FireTimeSecondDidChange(timeSecond);
                    break;
                }
                case (uint) PropertyID.ColFirst: {
                    changed = _colFirstProperty.Read(stream, context);
                    if (changed) FireColFirstDidChange(colFirst);
                    break;
                }
                case (uint) PropertyID.ColSecond: {
                    changed = _colSecondProperty.Read(stream, context);
                    if (changed) FireColSecondDidChange(colSecond);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _whowinner = whowinner;
        _timeFirst = timeFirst;
        _timeSecond = timeSecond;
        _colFirst = colFirst;
        _colSecond = colSecond;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
